// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/ADMIN/app/ent/diagnose"
	"github.com/ADMIN/app/ent/illness"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// IllnessCreate is the builder for creating a Illness entity.
type IllnessCreate struct {
	config
	mutation *IllnessMutation
	hooks    []Hook
}

// SetIllnessName sets the Illness_Name field.
func (ic *IllnessCreate) SetIllnessName(s string) *IllnessCreate {
	ic.mutation.SetIllnessName(s)
	return ic
}

// AddIllnessDiagnoseIDs adds the illness_diagnose edge to Diagnose by ids.
func (ic *IllnessCreate) AddIllnessDiagnoseIDs(ids ...int) *IllnessCreate {
	ic.mutation.AddIllnessDiagnoseIDs(ids...)
	return ic
}

// AddIllnessDiagnose adds the illness_diagnose edges to Diagnose.
func (ic *IllnessCreate) AddIllnessDiagnose(d ...*Diagnose) *IllnessCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ic.AddIllnessDiagnoseIDs(ids...)
}

// Mutation returns the IllnessMutation object of the builder.
func (ic *IllnessCreate) Mutation() *IllnessMutation {
	return ic.mutation
}

// Save creates the Illness in the database.
func (ic *IllnessCreate) Save(ctx context.Context) (*Illness, error) {
	if _, ok := ic.mutation.IllnessName(); !ok {
		return nil, &ValidationError{Name: "Illness_Name", err: errors.New("ent: missing required field \"Illness_Name\"")}
	}
	if v, ok := ic.mutation.IllnessName(); ok {
		if err := illness.IllnessNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "Illness_Name", err: fmt.Errorf("ent: validator failed for field \"Illness_Name\": %w", err)}
		}
	}
	var (
		err  error
		node *Illness
	)
	if len(ic.hooks) == 0 {
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IllnessMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ic.mutation = mutation
			node, err = ic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IllnessCreate) SaveX(ctx context.Context) *Illness {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ic *IllnessCreate) sqlSave(ctx context.Context) (*Illness, error) {
	i, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	i.ID = int(id)
	return i, nil
}

func (ic *IllnessCreate) createSpec() (*Illness, *sqlgraph.CreateSpec) {
	var (
		i     = &Illness{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: illness.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: illness.FieldID,
			},
		}
	)
	if value, ok := ic.mutation.IllnessName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: illness.FieldIllnessName,
		})
		i.IllnessName = value
	}
	if nodes := ic.mutation.IllnessDiagnoseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   illness.IllnessDiagnoseTable,
			Columns: []string{illness.IllnessDiagnoseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diagnose.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return i, _spec
}
