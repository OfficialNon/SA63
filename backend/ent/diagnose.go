// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/ADMIN/app/ent/diagnose"
	"github.com/ADMIN/app/ent/doctor"
	"github.com/ADMIN/app/ent/illness"
	"github.com/ADMIN/app/ent/patient"
	"github.com/ADMIN/app/ent/symptoms"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Diagnose is the model entity for the Diagnose schema.
type Diagnose struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiagnoseQuery when eager-loading is set.
	Edges                      DiagnoseEdges `json:"edges"`
	doctor_doctor_diagnose     *int
	illness_illness_diagnose   *int
	patient_patient_diagnose   *int
	symptoms_symptoms_diagnose *int
}

// DiagnoseEdges holds the relations/edges for other nodes in the graph.
type DiagnoseEdges struct {
	// Symptoms holds the value of the symptoms edge.
	Symptoms *Symptoms
	// Illness holds the value of the illness edge.
	Illness *Illness
	// Patient holds the value of the patient edge.
	Patient *Patient
	// Doctor holds the value of the doctor edge.
	Doctor *Doctor
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// SymptomsOrErr returns the Symptoms value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiagnoseEdges) SymptomsOrErr() (*Symptoms, error) {
	if e.loadedTypes[0] {
		if e.Symptoms == nil {
			// The edge symptoms was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: symptoms.Label}
		}
		return e.Symptoms, nil
	}
	return nil, &NotLoadedError{edge: "symptoms"}
}

// IllnessOrErr returns the Illness value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiagnoseEdges) IllnessOrErr() (*Illness, error) {
	if e.loadedTypes[1] {
		if e.Illness == nil {
			// The edge illness was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: illness.Label}
		}
		return e.Illness, nil
	}
	return nil, &NotLoadedError{edge: "illness"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiagnoseEdges) PatientOrErr() (*Patient, error) {
	if e.loadedTypes[2] {
		if e.Patient == nil {
			// The edge patient was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// DoctorOrErr returns the Doctor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiagnoseEdges) DoctorOrErr() (*Doctor, error) {
	if e.loadedTypes[3] {
		if e.Doctor == nil {
			// The edge doctor was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: doctor.Label}
		}
		return e.Doctor, nil
	}
	return nil, &NotLoadedError{edge: "doctor"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Diagnose) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Diagnose) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // doctor_doctor_diagnose
		&sql.NullInt64{}, // illness_illness_diagnose
		&sql.NullInt64{}, // patient_patient_diagnose
		&sql.NullInt64{}, // symptoms_symptoms_diagnose
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Diagnose fields.
func (d *Diagnose) assignValues(values ...interface{}) error {
	if m, n := len(values), len(diagnose.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	values = values[0:]
	if len(values) == len(diagnose.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field doctor_doctor_diagnose", value)
		} else if value.Valid {
			d.doctor_doctor_diagnose = new(int)
			*d.doctor_doctor_diagnose = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field illness_illness_diagnose", value)
		} else if value.Valid {
			d.illness_illness_diagnose = new(int)
			*d.illness_illness_diagnose = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field patient_patient_diagnose", value)
		} else if value.Valid {
			d.patient_patient_diagnose = new(int)
			*d.patient_patient_diagnose = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field symptoms_symptoms_diagnose", value)
		} else if value.Valid {
			d.symptoms_symptoms_diagnose = new(int)
			*d.symptoms_symptoms_diagnose = int(value.Int64)
		}
	}
	return nil
}

// QuerySymptoms queries the symptoms edge of the Diagnose.
func (d *Diagnose) QuerySymptoms() *SymptomsQuery {
	return (&DiagnoseClient{config: d.config}).QuerySymptoms(d)
}

// QueryIllness queries the illness edge of the Diagnose.
func (d *Diagnose) QueryIllness() *IllnessQuery {
	return (&DiagnoseClient{config: d.config}).QueryIllness(d)
}

// QueryPatient queries the patient edge of the Diagnose.
func (d *Diagnose) QueryPatient() *PatientQuery {
	return (&DiagnoseClient{config: d.config}).QueryPatient(d)
}

// QueryDoctor queries the doctor edge of the Diagnose.
func (d *Diagnose) QueryDoctor() *DoctorQuery {
	return (&DiagnoseClient{config: d.config}).QueryDoctor(d)
}

// Update returns a builder for updating this Diagnose.
// Note that, you need to call Diagnose.Unwrap() before calling this method, if this Diagnose
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Diagnose) Update() *DiagnoseUpdateOne {
	return (&DiagnoseClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Diagnose) Unwrap() *Diagnose {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Diagnose is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Diagnose) String() string {
	var builder strings.Builder
	builder.WriteString("Diagnose(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Diagnoses is a parsable slice of Diagnose.
type Diagnoses []*Diagnose

func (d Diagnoses) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
