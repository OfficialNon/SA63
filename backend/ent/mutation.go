// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/ADMIN/app/ent/diagnose"
	"github.com/ADMIN/app/ent/doctor"
	"github.com/ADMIN/app/ent/illness"
	"github.com/ADMIN/app/ent/patient"
	"github.com/ADMIN/app/ent/symptoms"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDiagnose = "Diagnose"
	TypeDoctor   = "Doctor"
	TypeIllness  = "Illness"
	TypePatient  = "Patient"
	TypeSymptoms = "Symptoms"
)

// DiagnoseMutation represents an operation that mutate the Diagnoses
// nodes in the graph.
type DiagnoseMutation struct {
	config
	op              Op
	typ             string
	id              *int
	clearedFields   map[string]struct{}
	symptoms        *int
	clearedsymptoms bool
	illness         *int
	clearedillness  bool
	patient         *int
	clearedpatient  bool
	doctor          *int
	cleareddoctor   bool
	done            bool
	oldValue        func(context.Context) (*Diagnose, error)
}

var _ ent.Mutation = (*DiagnoseMutation)(nil)

// diagnoseOption allows to manage the mutation configuration using functional options.
type diagnoseOption func(*DiagnoseMutation)

// newDiagnoseMutation creates new mutation for $n.Name.
func newDiagnoseMutation(c config, op Op, opts ...diagnoseOption) *DiagnoseMutation {
	m := &DiagnoseMutation{
		config:        c,
		op:            op,
		typ:           TypeDiagnose,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiagnoseID sets the id field of the mutation.
func withDiagnoseID(id int) diagnoseOption {
	return func(m *DiagnoseMutation) {
		var (
			err   error
			once  sync.Once
			value *Diagnose
		)
		m.oldValue = func(ctx context.Context) (*Diagnose, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Diagnose.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDiagnose sets the old Diagnose of the mutation.
func withDiagnose(node *Diagnose) diagnoseOption {
	return func(m *DiagnoseMutation) {
		m.oldValue = func(context.Context) (*Diagnose, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiagnoseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiagnoseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DiagnoseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSymptomsID sets the symptoms edge to Symptoms by id.
func (m *DiagnoseMutation) SetSymptomsID(id int) {
	m.symptoms = &id
}

// ClearSymptoms clears the symptoms edge to Symptoms.
func (m *DiagnoseMutation) ClearSymptoms() {
	m.clearedsymptoms = true
}

// SymptomsCleared returns if the edge symptoms was cleared.
func (m *DiagnoseMutation) SymptomsCleared() bool {
	return m.clearedsymptoms
}

// SymptomsID returns the symptoms id in the mutation.
func (m *DiagnoseMutation) SymptomsID() (id int, exists bool) {
	if m.symptoms != nil {
		return *m.symptoms, true
	}
	return
}

// SymptomsIDs returns the symptoms ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// SymptomsID instead. It exists only for internal usage by the builders.
func (m *DiagnoseMutation) SymptomsIDs() (ids []int) {
	if id := m.symptoms; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSymptoms reset all changes of the "symptoms" edge.
func (m *DiagnoseMutation) ResetSymptoms() {
	m.symptoms = nil
	m.clearedsymptoms = false
}

// SetIllnessID sets the illness edge to Illness by id.
func (m *DiagnoseMutation) SetIllnessID(id int) {
	m.illness = &id
}

// ClearIllness clears the illness edge to Illness.
func (m *DiagnoseMutation) ClearIllness() {
	m.clearedillness = true
}

// IllnessCleared returns if the edge illness was cleared.
func (m *DiagnoseMutation) IllnessCleared() bool {
	return m.clearedillness
}

// IllnessID returns the illness id in the mutation.
func (m *DiagnoseMutation) IllnessID() (id int, exists bool) {
	if m.illness != nil {
		return *m.illness, true
	}
	return
}

// IllnessIDs returns the illness ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// IllnessID instead. It exists only for internal usage by the builders.
func (m *DiagnoseMutation) IllnessIDs() (ids []int) {
	if id := m.illness; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIllness reset all changes of the "illness" edge.
func (m *DiagnoseMutation) ResetIllness() {
	m.illness = nil
	m.clearedillness = false
}

// SetPatientID sets the patient edge to Patient by id.
func (m *DiagnoseMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the patient edge to Patient.
func (m *DiagnoseMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared returns if the edge patient was cleared.
func (m *DiagnoseMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the patient id in the mutation.
func (m *DiagnoseMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *DiagnoseMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *DiagnoseMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// SetDoctorID sets the doctor edge to Doctor by id.
func (m *DiagnoseMutation) SetDoctorID(id int) {
	m.doctor = &id
}

// ClearDoctor clears the doctor edge to Doctor.
func (m *DiagnoseMutation) ClearDoctor() {
	m.cleareddoctor = true
}

// DoctorCleared returns if the edge doctor was cleared.
func (m *DiagnoseMutation) DoctorCleared() bool {
	return m.cleareddoctor
}

// DoctorID returns the doctor id in the mutation.
func (m *DiagnoseMutation) DoctorID() (id int, exists bool) {
	if m.doctor != nil {
		return *m.doctor, true
	}
	return
}

// DoctorIDs returns the doctor ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DoctorID instead. It exists only for internal usage by the builders.
func (m *DiagnoseMutation) DoctorIDs() (ids []int) {
	if id := m.doctor; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDoctor reset all changes of the "doctor" edge.
func (m *DiagnoseMutation) ResetDoctor() {
	m.doctor = nil
	m.cleareddoctor = false
}

// Op returns the operation name.
func (m *DiagnoseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Diagnose).
func (m *DiagnoseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DiagnoseMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DiagnoseMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DiagnoseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Diagnose field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DiagnoseMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Diagnose field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DiagnoseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DiagnoseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DiagnoseMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Diagnose numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DiagnoseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DiagnoseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiagnoseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Diagnose nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DiagnoseMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Diagnose field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DiagnoseMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.symptoms != nil {
		edges = append(edges, diagnose.EdgeSymptoms)
	}
	if m.illness != nil {
		edges = append(edges, diagnose.EdgeIllness)
	}
	if m.patient != nil {
		edges = append(edges, diagnose.EdgePatient)
	}
	if m.doctor != nil {
		edges = append(edges, diagnose.EdgeDoctor)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DiagnoseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case diagnose.EdgeSymptoms:
		if id := m.symptoms; id != nil {
			return []ent.Value{*id}
		}
	case diagnose.EdgeIllness:
		if id := m.illness; id != nil {
			return []ent.Value{*id}
		}
	case diagnose.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	case diagnose.EdgeDoctor:
		if id := m.doctor; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DiagnoseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DiagnoseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DiagnoseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedsymptoms {
		edges = append(edges, diagnose.EdgeSymptoms)
	}
	if m.clearedillness {
		edges = append(edges, diagnose.EdgeIllness)
	}
	if m.clearedpatient {
		edges = append(edges, diagnose.EdgePatient)
	}
	if m.cleareddoctor {
		edges = append(edges, diagnose.EdgeDoctor)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DiagnoseMutation) EdgeCleared(name string) bool {
	switch name {
	case diagnose.EdgeSymptoms:
		return m.clearedsymptoms
	case diagnose.EdgeIllness:
		return m.clearedillness
	case diagnose.EdgePatient:
		return m.clearedpatient
	case diagnose.EdgeDoctor:
		return m.cleareddoctor
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DiagnoseMutation) ClearEdge(name string) error {
	switch name {
	case diagnose.EdgeSymptoms:
		m.ClearSymptoms()
		return nil
	case diagnose.EdgeIllness:
		m.ClearIllness()
		return nil
	case diagnose.EdgePatient:
		m.ClearPatient()
		return nil
	case diagnose.EdgeDoctor:
		m.ClearDoctor()
		return nil
	}
	return fmt.Errorf("unknown Diagnose unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DiagnoseMutation) ResetEdge(name string) error {
	switch name {
	case diagnose.EdgeSymptoms:
		m.ResetSymptoms()
		return nil
	case diagnose.EdgeIllness:
		m.ResetIllness()
		return nil
	case diagnose.EdgePatient:
		m.ResetPatient()
		return nil
	case diagnose.EdgeDoctor:
		m.ResetDoctor()
		return nil
	}
	return fmt.Errorf("unknown Diagnose edge %s", name)
}

// DoctorMutation represents an operation that mutate the Doctors
// nodes in the graph.
type DoctorMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	_Doctor_NAME           *string
	_Doctor_Email          *string
	clearedFields          map[string]struct{}
	doctor_diagnose        map[int]struct{}
	removeddoctor_diagnose map[int]struct{}
	done                   bool
	oldValue               func(context.Context) (*Doctor, error)
}

var _ ent.Mutation = (*DoctorMutation)(nil)

// doctorOption allows to manage the mutation configuration using functional options.
type doctorOption func(*DoctorMutation)

// newDoctorMutation creates new mutation for $n.Name.
func newDoctorMutation(c config, op Op, opts ...doctorOption) *DoctorMutation {
	m := &DoctorMutation{
		config:        c,
		op:            op,
		typ:           TypeDoctor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDoctorID sets the id field of the mutation.
func withDoctorID(id int) doctorOption {
	return func(m *DoctorMutation) {
		var (
			err   error
			once  sync.Once
			value *Doctor
		)
		m.oldValue = func(ctx context.Context) (*Doctor, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Doctor.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDoctor sets the old Doctor of the mutation.
func withDoctor(node *Doctor) doctorOption {
	return func(m *DoctorMutation) {
		m.oldValue = func(context.Context) (*Doctor, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DoctorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DoctorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DoctorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDoctorNAME sets the Doctor_NAME field.
func (m *DoctorMutation) SetDoctorNAME(s string) {
	m._Doctor_NAME = &s
}

// DoctorNAME returns the Doctor_NAME value in the mutation.
func (m *DoctorMutation) DoctorNAME() (r string, exists bool) {
	v := m._Doctor_NAME
	if v == nil {
		return
	}
	return *v, true
}

// OldDoctorNAME returns the old Doctor_NAME value of the Doctor.
// If the Doctor object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DoctorMutation) OldDoctorNAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDoctorNAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDoctorNAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoctorNAME: %w", err)
	}
	return oldValue.DoctorNAME, nil
}

// ResetDoctorNAME reset all changes of the "Doctor_NAME" field.
func (m *DoctorMutation) ResetDoctorNAME() {
	m._Doctor_NAME = nil
}

// SetDoctorEmail sets the Doctor_Email field.
func (m *DoctorMutation) SetDoctorEmail(s string) {
	m._Doctor_Email = &s
}

// DoctorEmail returns the Doctor_Email value in the mutation.
func (m *DoctorMutation) DoctorEmail() (r string, exists bool) {
	v := m._Doctor_Email
	if v == nil {
		return
	}
	return *v, true
}

// OldDoctorEmail returns the old Doctor_Email value of the Doctor.
// If the Doctor object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DoctorMutation) OldDoctorEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDoctorEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDoctorEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoctorEmail: %w", err)
	}
	return oldValue.DoctorEmail, nil
}

// ResetDoctorEmail reset all changes of the "Doctor_Email" field.
func (m *DoctorMutation) ResetDoctorEmail() {
	m._Doctor_Email = nil
}

// AddDoctorDiagnoseIDs adds the doctor_diagnose edge to Diagnose by ids.
func (m *DoctorMutation) AddDoctorDiagnoseIDs(ids ...int) {
	if m.doctor_diagnose == nil {
		m.doctor_diagnose = make(map[int]struct{})
	}
	for i := range ids {
		m.doctor_diagnose[ids[i]] = struct{}{}
	}
}

// RemoveDoctorDiagnoseIDs removes the doctor_diagnose edge to Diagnose by ids.
func (m *DoctorMutation) RemoveDoctorDiagnoseIDs(ids ...int) {
	if m.removeddoctor_diagnose == nil {
		m.removeddoctor_diagnose = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddoctor_diagnose[ids[i]] = struct{}{}
	}
}

// RemovedDoctorDiagnose returns the removed ids of doctor_diagnose.
func (m *DoctorMutation) RemovedDoctorDiagnoseIDs() (ids []int) {
	for id := range m.removeddoctor_diagnose {
		ids = append(ids, id)
	}
	return
}

// DoctorDiagnoseIDs returns the doctor_diagnose ids in the mutation.
func (m *DoctorMutation) DoctorDiagnoseIDs() (ids []int) {
	for id := range m.doctor_diagnose {
		ids = append(ids, id)
	}
	return
}

// ResetDoctorDiagnose reset all changes of the "doctor_diagnose" edge.
func (m *DoctorMutation) ResetDoctorDiagnose() {
	m.doctor_diagnose = nil
	m.removeddoctor_diagnose = nil
}

// Op returns the operation name.
func (m *DoctorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Doctor).
func (m *DoctorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DoctorMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._Doctor_NAME != nil {
		fields = append(fields, doctor.FieldDoctorNAME)
	}
	if m._Doctor_Email != nil {
		fields = append(fields, doctor.FieldDoctorEmail)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DoctorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case doctor.FieldDoctorNAME:
		return m.DoctorNAME()
	case doctor.FieldDoctorEmail:
		return m.DoctorEmail()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DoctorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case doctor.FieldDoctorNAME:
		return m.OldDoctorNAME(ctx)
	case doctor.FieldDoctorEmail:
		return m.OldDoctorEmail(ctx)
	}
	return nil, fmt.Errorf("unknown Doctor field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DoctorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case doctor.FieldDoctorNAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoctorNAME(v)
		return nil
	case doctor.FieldDoctorEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoctorEmail(v)
		return nil
	}
	return fmt.Errorf("unknown Doctor field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DoctorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DoctorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DoctorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Doctor numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DoctorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DoctorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DoctorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Doctor nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DoctorMutation) ResetField(name string) error {
	switch name {
	case doctor.FieldDoctorNAME:
		m.ResetDoctorNAME()
		return nil
	case doctor.FieldDoctorEmail:
		m.ResetDoctorEmail()
		return nil
	}
	return fmt.Errorf("unknown Doctor field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DoctorMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.doctor_diagnose != nil {
		edges = append(edges, doctor.EdgeDoctorDiagnose)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DoctorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case doctor.EdgeDoctorDiagnose:
		ids := make([]ent.Value, 0, len(m.doctor_diagnose))
		for id := range m.doctor_diagnose {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DoctorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddoctor_diagnose != nil {
		edges = append(edges, doctor.EdgeDoctorDiagnose)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DoctorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case doctor.EdgeDoctorDiagnose:
		ids := make([]ent.Value, 0, len(m.removeddoctor_diagnose))
		for id := range m.removeddoctor_diagnose {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DoctorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DoctorMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DoctorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Doctor unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DoctorMutation) ResetEdge(name string) error {
	switch name {
	case doctor.EdgeDoctorDiagnose:
		m.ResetDoctorDiagnose()
		return nil
	}
	return fmt.Errorf("unknown Doctor edge %s", name)
}

// IllnessMutation represents an operation that mutate the Illnesses
// nodes in the graph.
type IllnessMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	_Illness_Name           *string
	clearedFields           map[string]struct{}
	illness_diagnose        map[int]struct{}
	removedillness_diagnose map[int]struct{}
	done                    bool
	oldValue                func(context.Context) (*Illness, error)
}

var _ ent.Mutation = (*IllnessMutation)(nil)

// illnessOption allows to manage the mutation configuration using functional options.
type illnessOption func(*IllnessMutation)

// newIllnessMutation creates new mutation for $n.Name.
func newIllnessMutation(c config, op Op, opts ...illnessOption) *IllnessMutation {
	m := &IllnessMutation{
		config:        c,
		op:            op,
		typ:           TypeIllness,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIllnessID sets the id field of the mutation.
func withIllnessID(id int) illnessOption {
	return func(m *IllnessMutation) {
		var (
			err   error
			once  sync.Once
			value *Illness
		)
		m.oldValue = func(ctx context.Context) (*Illness, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Illness.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIllness sets the old Illness of the mutation.
func withIllness(node *Illness) illnessOption {
	return func(m *IllnessMutation) {
		m.oldValue = func(context.Context) (*Illness, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IllnessMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IllnessMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *IllnessMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetIllnessName sets the Illness_Name field.
func (m *IllnessMutation) SetIllnessName(s string) {
	m._Illness_Name = &s
}

// IllnessName returns the Illness_Name value in the mutation.
func (m *IllnessMutation) IllnessName() (r string, exists bool) {
	v := m._Illness_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldIllnessName returns the old Illness_Name value of the Illness.
// If the Illness object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *IllnessMutation) OldIllnessName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIllnessName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIllnessName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIllnessName: %w", err)
	}
	return oldValue.IllnessName, nil
}

// ResetIllnessName reset all changes of the "Illness_Name" field.
func (m *IllnessMutation) ResetIllnessName() {
	m._Illness_Name = nil
}

// AddIllnessDiagnoseIDs adds the illness_diagnose edge to Diagnose by ids.
func (m *IllnessMutation) AddIllnessDiagnoseIDs(ids ...int) {
	if m.illness_diagnose == nil {
		m.illness_diagnose = make(map[int]struct{})
	}
	for i := range ids {
		m.illness_diagnose[ids[i]] = struct{}{}
	}
}

// RemoveIllnessDiagnoseIDs removes the illness_diagnose edge to Diagnose by ids.
func (m *IllnessMutation) RemoveIllnessDiagnoseIDs(ids ...int) {
	if m.removedillness_diagnose == nil {
		m.removedillness_diagnose = make(map[int]struct{})
	}
	for i := range ids {
		m.removedillness_diagnose[ids[i]] = struct{}{}
	}
}

// RemovedIllnessDiagnose returns the removed ids of illness_diagnose.
func (m *IllnessMutation) RemovedIllnessDiagnoseIDs() (ids []int) {
	for id := range m.removedillness_diagnose {
		ids = append(ids, id)
	}
	return
}

// IllnessDiagnoseIDs returns the illness_diagnose ids in the mutation.
func (m *IllnessMutation) IllnessDiagnoseIDs() (ids []int) {
	for id := range m.illness_diagnose {
		ids = append(ids, id)
	}
	return
}

// ResetIllnessDiagnose reset all changes of the "illness_diagnose" edge.
func (m *IllnessMutation) ResetIllnessDiagnose() {
	m.illness_diagnose = nil
	m.removedillness_diagnose = nil
}

// Op returns the operation name.
func (m *IllnessMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Illness).
func (m *IllnessMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *IllnessMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Illness_Name != nil {
		fields = append(fields, illness.FieldIllnessName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *IllnessMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case illness.FieldIllnessName:
		return m.IllnessName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *IllnessMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case illness.FieldIllnessName:
		return m.OldIllnessName(ctx)
	}
	return nil, fmt.Errorf("unknown Illness field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *IllnessMutation) SetField(name string, value ent.Value) error {
	switch name {
	case illness.FieldIllnessName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIllnessName(v)
		return nil
	}
	return fmt.Errorf("unknown Illness field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *IllnessMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *IllnessMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *IllnessMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Illness numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *IllnessMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *IllnessMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *IllnessMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Illness nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *IllnessMutation) ResetField(name string) error {
	switch name {
	case illness.FieldIllnessName:
		m.ResetIllnessName()
		return nil
	}
	return fmt.Errorf("unknown Illness field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *IllnessMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.illness_diagnose != nil {
		edges = append(edges, illness.EdgeIllnessDiagnose)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *IllnessMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case illness.EdgeIllnessDiagnose:
		ids := make([]ent.Value, 0, len(m.illness_diagnose))
		for id := range m.illness_diagnose {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *IllnessMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedillness_diagnose != nil {
		edges = append(edges, illness.EdgeIllnessDiagnose)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *IllnessMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case illness.EdgeIllnessDiagnose:
		ids := make([]ent.Value, 0, len(m.removedillness_diagnose))
		for id := range m.removedillness_diagnose {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *IllnessMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *IllnessMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *IllnessMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Illness unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *IllnessMutation) ResetEdge(name string) error {
	switch name {
	case illness.EdgeIllnessDiagnose:
		m.ResetIllnessDiagnose()
		return nil
	}
	return fmt.Errorf("unknown Illness edge %s", name)
}

// PatientMutation represents an operation that mutate the Patients
// nodes in the graph.
type PatientMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	_Patient_Name           *string
	clearedFields           map[string]struct{}
	patient_diagnose        map[int]struct{}
	removedpatient_diagnose map[int]struct{}
	done                    bool
	oldValue                func(context.Context) (*Patient, error)
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows to manage the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for $n.Name.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the id field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPatientName sets the Patient_Name field.
func (m *PatientMutation) SetPatientName(s string) {
	m._Patient_Name = &s
}

// PatientName returns the Patient_Name value in the mutation.
func (m *PatientMutation) PatientName() (r string, exists bool) {
	v := m._Patient_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientName returns the old Patient_Name value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientName: %w", err)
	}
	return oldValue.PatientName, nil
}

// ResetPatientName reset all changes of the "Patient_Name" field.
func (m *PatientMutation) ResetPatientName() {
	m._Patient_Name = nil
}

// AddPatientDiagnoseIDs adds the patient_diagnose edge to Diagnose by ids.
func (m *PatientMutation) AddPatientDiagnoseIDs(ids ...int) {
	if m.patient_diagnose == nil {
		m.patient_diagnose = make(map[int]struct{})
	}
	for i := range ids {
		m.patient_diagnose[ids[i]] = struct{}{}
	}
}

// RemovePatientDiagnoseIDs removes the patient_diagnose edge to Diagnose by ids.
func (m *PatientMutation) RemovePatientDiagnoseIDs(ids ...int) {
	if m.removedpatient_diagnose == nil {
		m.removedpatient_diagnose = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatient_diagnose[ids[i]] = struct{}{}
	}
}

// RemovedPatientDiagnose returns the removed ids of patient_diagnose.
func (m *PatientMutation) RemovedPatientDiagnoseIDs() (ids []int) {
	for id := range m.removedpatient_diagnose {
		ids = append(ids, id)
	}
	return
}

// PatientDiagnoseIDs returns the patient_diagnose ids in the mutation.
func (m *PatientMutation) PatientDiagnoseIDs() (ids []int) {
	for id := range m.patient_diagnose {
		ids = append(ids, id)
	}
	return
}

// ResetPatientDiagnose reset all changes of the "patient_diagnose" edge.
func (m *PatientMutation) ResetPatientDiagnose() {
	m.patient_diagnose = nil
	m.removedpatient_diagnose = nil
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Patient_Name != nil {
		fields = append(fields, patient.FieldPatientName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldPatientName:
		return m.PatientName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldPatientName:
		return m.OldPatientName(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldPatientName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientName(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldPatientName:
		m.ResetPatientName()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patient_diagnose != nil {
		edges = append(edges, patient.EdgePatientDiagnose)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgePatientDiagnose:
		ids := make([]ent.Value, 0, len(m.patient_diagnose))
		for id := range m.patient_diagnose {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpatient_diagnose != nil {
		edges = append(edges, patient.EdgePatientDiagnose)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgePatientDiagnose:
		ids := make([]ent.Value, 0, len(m.removedpatient_diagnose))
		for id := range m.removedpatient_diagnose {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgePatientDiagnose:
		m.ResetPatientDiagnose()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}

// SymptomsMutation represents an operation that mutate the SymptomsSlice
// nodes in the graph.
type SymptomsMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	_Manner                  *string
	clearedFields            map[string]struct{}
	symptoms_diagnose        map[int]struct{}
	removedsymptoms_diagnose map[int]struct{}
	done                     bool
	oldValue                 func(context.Context) (*Symptoms, error)
}

var _ ent.Mutation = (*SymptomsMutation)(nil)

// symptomsOption allows to manage the mutation configuration using functional options.
type symptomsOption func(*SymptomsMutation)

// newSymptomsMutation creates new mutation for $n.Name.
func newSymptomsMutation(c config, op Op, opts ...symptomsOption) *SymptomsMutation {
	m := &SymptomsMutation{
		config:        c,
		op:            op,
		typ:           TypeSymptoms,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSymptomsID sets the id field of the mutation.
func withSymptomsID(id int) symptomsOption {
	return func(m *SymptomsMutation) {
		var (
			err   error
			once  sync.Once
			value *Symptoms
		)
		m.oldValue = func(ctx context.Context) (*Symptoms, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Symptoms.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSymptoms sets the old Symptoms of the mutation.
func withSymptoms(node *Symptoms) symptomsOption {
	return func(m *SymptomsMutation) {
		m.oldValue = func(context.Context) (*Symptoms, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SymptomsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SymptomsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SymptomsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetManner sets the Manner field.
func (m *SymptomsMutation) SetManner(s string) {
	m._Manner = &s
}

// Manner returns the Manner value in the mutation.
func (m *SymptomsMutation) Manner() (r string, exists bool) {
	v := m._Manner
	if v == nil {
		return
	}
	return *v, true
}

// OldManner returns the old Manner value of the Symptoms.
// If the Symptoms object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SymptomsMutation) OldManner(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldManner is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldManner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldManner: %w", err)
	}
	return oldValue.Manner, nil
}

// ResetManner reset all changes of the "Manner" field.
func (m *SymptomsMutation) ResetManner() {
	m._Manner = nil
}

// AddSymptomsDiagnoseIDs adds the symptoms_diagnose edge to Diagnose by ids.
func (m *SymptomsMutation) AddSymptomsDiagnoseIDs(ids ...int) {
	if m.symptoms_diagnose == nil {
		m.symptoms_diagnose = make(map[int]struct{})
	}
	for i := range ids {
		m.symptoms_diagnose[ids[i]] = struct{}{}
	}
}

// RemoveSymptomsDiagnoseIDs removes the symptoms_diagnose edge to Diagnose by ids.
func (m *SymptomsMutation) RemoveSymptomsDiagnoseIDs(ids ...int) {
	if m.removedsymptoms_diagnose == nil {
		m.removedsymptoms_diagnose = make(map[int]struct{})
	}
	for i := range ids {
		m.removedsymptoms_diagnose[ids[i]] = struct{}{}
	}
}

// RemovedSymptomsDiagnose returns the removed ids of symptoms_diagnose.
func (m *SymptomsMutation) RemovedSymptomsDiagnoseIDs() (ids []int) {
	for id := range m.removedsymptoms_diagnose {
		ids = append(ids, id)
	}
	return
}

// SymptomsDiagnoseIDs returns the symptoms_diagnose ids in the mutation.
func (m *SymptomsMutation) SymptomsDiagnoseIDs() (ids []int) {
	for id := range m.symptoms_diagnose {
		ids = append(ids, id)
	}
	return
}

// ResetSymptomsDiagnose reset all changes of the "symptoms_diagnose" edge.
func (m *SymptomsMutation) ResetSymptomsDiagnose() {
	m.symptoms_diagnose = nil
	m.removedsymptoms_diagnose = nil
}

// Op returns the operation name.
func (m *SymptomsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Symptoms).
func (m *SymptomsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SymptomsMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Manner != nil {
		fields = append(fields, symptoms.FieldManner)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SymptomsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case symptoms.FieldManner:
		return m.Manner()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *SymptomsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case symptoms.FieldManner:
		return m.OldManner(ctx)
	}
	return nil, fmt.Errorf("unknown Symptoms field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SymptomsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case symptoms.FieldManner:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetManner(v)
		return nil
	}
	return fmt.Errorf("unknown Symptoms field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SymptomsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SymptomsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SymptomsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Symptoms numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SymptomsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SymptomsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SymptomsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Symptoms nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SymptomsMutation) ResetField(name string) error {
	switch name {
	case symptoms.FieldManner:
		m.ResetManner()
		return nil
	}
	return fmt.Errorf("unknown Symptoms field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SymptomsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.symptoms_diagnose != nil {
		edges = append(edges, symptoms.EdgeSymptomsDiagnose)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SymptomsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case symptoms.EdgeSymptomsDiagnose:
		ids := make([]ent.Value, 0, len(m.symptoms_diagnose))
		for id := range m.symptoms_diagnose {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SymptomsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsymptoms_diagnose != nil {
		edges = append(edges, symptoms.EdgeSymptomsDiagnose)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SymptomsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case symptoms.EdgeSymptomsDiagnose:
		ids := make([]ent.Value, 0, len(m.removedsymptoms_diagnose))
		for id := range m.removedsymptoms_diagnose {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SymptomsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SymptomsMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SymptomsMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Symptoms unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SymptomsMutation) ResetEdge(name string) error {
	switch name {
	case symptoms.EdgeSymptomsDiagnose:
		m.ResetSymptomsDiagnose()
		return nil
	}
	return fmt.Errorf("unknown Symptoms edge %s", name)
}
