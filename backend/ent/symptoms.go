// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/ADMIN/app/ent/symptoms"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Symptoms is the model entity for the Symptoms schema.
type Symptoms struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Manner holds the value of the "Manner" field.
	Manner string `json:"Manner,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SymptomsQuery when eager-loading is set.
	Edges SymptomsEdges `json:"edges"`
}

// SymptomsEdges holds the relations/edges for other nodes in the graph.
type SymptomsEdges struct {
	// SymptomsDiagnose holds the value of the symptoms_diagnose edge.
	SymptomsDiagnose []*Diagnose
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SymptomsDiagnoseOrErr returns the SymptomsDiagnose value or an error if the edge
// was not loaded in eager-loading.
func (e SymptomsEdges) SymptomsDiagnoseOrErr() ([]*Diagnose, error) {
	if e.loadedTypes[0] {
		return e.SymptomsDiagnose, nil
	}
	return nil, &NotLoadedError{edge: "symptoms_diagnose"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Symptoms) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Manner
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Symptoms fields.
func (s *Symptoms) assignValues(values ...interface{}) error {
	if m, n := len(values), len(symptoms.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Manner", values[0])
	} else if value.Valid {
		s.Manner = value.String
	}
	return nil
}

// QuerySymptomsDiagnose queries the symptoms_diagnose edge of the Symptoms.
func (s *Symptoms) QuerySymptomsDiagnose() *DiagnoseQuery {
	return (&SymptomsClient{config: s.config}).QuerySymptomsDiagnose(s)
}

// Update returns a builder for updating this Symptoms.
// Note that, you need to call Symptoms.Unwrap() before calling this method, if this Symptoms
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Symptoms) Update() *SymptomsUpdateOne {
	return (&SymptomsClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Symptoms) Unwrap() *Symptoms {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Symptoms is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Symptoms) String() string {
	var builder strings.Builder
	builder.WriteString("Symptoms(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", Manner=")
	builder.WriteString(s.Manner)
	builder.WriteByte(')')
	return builder.String()
}

// SymptomsSlice is a parsable slice of Symptoms.
type SymptomsSlice []*Symptoms

func (s SymptomsSlice) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
